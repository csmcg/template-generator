/**
 * File: SectionEditor.java
 * Author: Malik Midani mikex535@uab.edu
 * Assignment: Template Generator - EE333 Spring 2018 Team 5
 * Vers: 1.0.0 04/20/2018 MM - initial coding
 */

import javax.swing.DefaultListModel;

/** 
 * GUI for adding, removing, and moving headings and subheadings.
 * 
 * @author Malik Midani mikex535@uab.edu
 */
public class SectionEditor extends javax.swing.JFrame {

    private DefaultListModel headingModel;
    private DefaultListModel subheadingModel;
    private Headings h;
    private Formal   f = null;
    private Informal inf = null;

    /**
     * Creates new form SectionEditor
     */
    public SectionEditor() {
        h = new Headings(TEMPLATE.FORMAL);
        initComponents();
    }

    /**
     * Constructs the SectionEditor GUI for when called from the formal template.
     * @param f GUI the sectioneditor is called from
     * @param h the current heading tree
     */
    public SectionEditor(Formal f, Headings h) {
        this.h = h;
        this.f = f;
        initComponents();
    }
    
    /**
     * Constructs the SectionEDitor GUI for when called from the informal template
     * 
     * @param inf GUI the sectioneditor was called from
     * @param h the current heading tree
     */
    public SectionEditor(Informal inf, Headings h) {
        this.h = h;
        this.inf = inf;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        headingModel = new DefaultListModel();
        buildHeadingList();
        headingList = new javax.swing.JList<>(headingModel);
        jScrollPane2 = new javax.swing.JScrollPane();
        subheadingModel = new DefaultListModel();
        subheadingList = new javax.swing.JList<>(subheadingModel);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        headingDown = new javax.swing.JButton();
        headingUp = new javax.swing.JButton();
        newHeading = new javax.swing.JTextField();
        headingAdd = new javax.swing.JButton();
        headingRemove = new javax.swing.JButton();
        subheadingDown = new javax.swing.JButton();
        subheadingUp = new javax.swing.JButton();
        newSubheading = new javax.swing.JTextField();
        subheadingAdd = new javax.swing.JButton();
        subheadingRemove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        headingList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        headingList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                headingListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(headingList);

        jScrollPane2.setViewportView(subheadingList);

        jLabel1.setText("Headings:");

        jLabel2.setText("Subheadings for selected heading:");

        headingDown.setText("Move Down");
        headingDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headingDownActionPerformed(evt);
            }
        });

        headingUp.setText("Move Up");
        headingUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headingUpActionPerformed(evt);
            }
        });

        newHeading.setToolTipText("");
        newHeading.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newHeadingActionPerformed(evt);
            }
        });

        headingAdd.setText("Add");
        headingAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headingAddActionPerformed(evt);
            }
        });

        headingRemove.setText("Remove");
        headingRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headingRemoveActionPerformed(evt);
            }
        });

        subheadingDown.setText("Move Down");
        subheadingDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subheadingDownActionPerformed(evt);
            }
        });

        subheadingUp.setText("Move Up");
        subheadingUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subheadingUpActionPerformed(evt);
            }
        });

        newSubheading.setToolTipText("");

        subheadingAdd.setText("Add");
        subheadingAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subheadingAddActionPerformed(evt);
            }
        });

        subheadingRemove.setText("Remove");
        subheadingRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subheadingRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(newHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(headingAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(headingRemove)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(headingDown, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(headingUp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newSubheading, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(subheadingDown, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(subheadingUp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(subheadingAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(subheadingRemove)))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newHeading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headingAdd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(headingRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(headingUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(headingDown))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newSubheading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subheadingAdd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subheadingRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(subheadingUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subheadingDown))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Moves the selected heading up the tree
     * 
     * @param evt 
     */
    private void headingUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headingUpActionPerformed
        // TODO add your handling code here:
        int i = headingList.getSelectedIndex();
        if (i != 0){
        Heading temp = h.getHeading(i);
        h.setHeading(i, h.getHeading(i-1));
        h.setHeading(i-1, temp);
        headingModel.clear();
        buildHeadingList();
        headingList.setSelectedIndex(i-1);
        }
        
    }//GEN-LAST:event_headingUpActionPerformed

    /**
     * Adds a heading to the tree
     * 
     * @param evt 
     */
    private void headingAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headingAddActionPerformed
        // TODO add your handling code here:
        String s = newHeading.getText();
        if (!"".equals(s)){
            h.add(new Heading(s));
        }
        newHeading.setText("");
        headingModel.clear();
        buildHeadingList();
    }//GEN-LAST:event_headingAddActionPerformed

    /**
     * Moves a subheading up the list of subheadings under the selected heading
     * 
     * @param evt 
     */
    private void subheadingUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subheadingUpActionPerformed
        // TODO add your handling code here:
        if (headingList.getSelectedIndex() != -1){
        int i = headingList.getSelectedIndex();
        int j = subheadingList.getSelectedIndex();
        if (j != 0){
        Subheading temp = h.getHeading(i).getSH(j);
        h.getHeading(i).setSH(j, h.getHeading(i).getSH(j-1));
        h.getHeading(i).setSH(j-1, temp);
        subheadingModel.clear();
        buildSubheadingList(i);
        subheadingList.setSelectedIndex(j-1);
        }
        }
    }//GEN-LAST:event_subheadingUpActionPerformed

    /**
     * Adds a subheading underneath the selected top level heading 
     * @param evt 
     */
    private void subheadingAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subheadingAddActionPerformed
        // TODO add your handling code here:
        if (headingList.getSelectedIndex() != -1){
        String s = newSubheading.getText();
        if (!"".equals(s)){
            h.getHeading(headingList.getSelectedIndex()).add(new Subheading(s));
        }
        newSubheading.setText("");
        subheadingModel.clear();
        buildSubheadingList(headingList.getSelectedIndex());
        }
    }//GEN-LAST:event_subheadingAddActionPerformed

    /**
     * Moves a top level heading (along with its child subheadings) down the tree
     * @param evt 
     */
    private void headingDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headingDownActionPerformed
        // TODO add your handling code here:
        int i = headingList.getSelectedIndex();
        if (i != h.getCount()-1){
        Heading temp = h.getHeading(i);
        h.setHeading(i, h.getHeading(i+1));
        h.setHeading(i+1, temp);
        headingModel.clear();
        buildHeadingList();
        headingList.setSelectedIndex(i+1);
        } 
    }//GEN-LAST:event_headingDownActionPerformed

    /**
     * Creates a new top level heading
     * 
     * @param evt 
     */
    private void newHeadingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newHeadingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newHeadingActionPerformed

    /** 
     * Removes a top level heading
     * 
     * @param evt 
     */
    private void headingRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headingRemoveActionPerformed
        // TODO add your handling code here:
        h.remove(headingList.getSelectedIndex());
        headingModel.clear();
        buildHeadingList();
        headingList.setSelectedIndex(-1);
    }//GEN-LAST:event_headingRemoveActionPerformed

    /**
     * Event handler for displaying the subheadings of the newly selected
     * heading
     * 
     * @param evt 
     */
    private void headingListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_headingListValueChanged
        // TODO add your handling code here:
        subheadingModel.clear();
        int i = headingList.getSelectedIndex();
        if (i != -1){
            if (h.getHeading(i).getCount() != 0){
                buildSubheadingList(i);
            }
        }
    }//GEN-LAST:event_headingListValueChanged

    /**
     * Removes the selected subheading
     * 
     * @param evt 
     */
    private void subheadingRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subheadingRemoveActionPerformed
        // TODO add your handling code here:
        if (headingList.getSelectedIndex() != -1){
        h.getHeading(headingList.getSelectedIndex())
                .remove(subheadingList.getSelectedIndex());
        subheadingModel.clear();
        buildSubheadingList(headingList.getSelectedIndex());
        subheadingList.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_subheadingRemoveActionPerformed

    /**
     * Moves the selected subheading down
     * 
     * @param evt 
     */
    private void subheadingDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subheadingDownActionPerformed
        // TODO add your handling code here:
        if (headingList.getSelectedIndex() != -1){
        int i = headingList.getSelectedIndex();
        int j = subheadingList.getSelectedIndex();
        if (j != h.getHeading(i).getCount()-1){
        Subheading temp = h.getHeading(i).getSH(j);
        h.getHeading(i).setSH(j, h.getHeading(i).getSH(j+1));
        h.getHeading(i).setSH(j+1, temp);
        subheadingModel.clear();
        buildSubheadingList(i);
        subheadingList.setSelectedIndex(j+1);
        }
        }
    }//GEN-LAST:event_subheadingDownActionPerformed

    /**
     * Called when section editor GUI is closed
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (f == null)
            inf.updateSections();
        else
            f.updateSections();
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SectionEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SectionEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SectionEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SectionEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SectionEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton headingAdd;
    private javax.swing.JButton headingDown;
    private javax.swing.JList<String> headingList;
    private javax.swing.JButton headingRemove;
    private javax.swing.JButton headingUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField newHeading;
    private javax.swing.JTextField newSubheading;
    private javax.swing.JButton subheadingAdd;
    private javax.swing.JButton subheadingDown;
    private javax.swing.JList<String> subheadingList;
    private javax.swing.JButton subheadingRemove;
    private javax.swing.JButton subheadingUp;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Builds the list of headings
     */
    private void buildHeadingList(){
        
        for (int i=0;i<h.getCount();i++){
            headingModel.addElement(h.getHeading(i).getName());
        }
        
    }
    
    /**
     * Builds the list of subheadings at the supplied heading index
     * 
     * @param hIndex index of heading whose subheadings should be displayed
     */
    private void buildSubheadingList(int hIndex){
        
        for (int i=0;i< h.getHeading(hIndex).getCount() ;i++){
            subheadingModel.addElement(h.getHeading(hIndex).getSH(i).getName());
        }
    }
}


